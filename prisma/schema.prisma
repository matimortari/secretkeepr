datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Environment {
  development
  staging
  production
}

enum Role {
  owner
  admin
  member
}

model User {
  id            String                   @id @default(cuid())
  email         String                   @unique
  name          String
  image         String?
  apiToken      String?                  @unique
  activeOrgId   String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  accounts      Account[]
  organizations OrganizationMembership[]
  projects      ProjectMembership[]
  auditLogs     AuditLog[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  memberships OrganizationMembership[]
  projects    Project[]
  invitations Invitation[]
  auditLogs   AuditLog[]
}

model OrganizationMembership {
  userId       String
  orgId        String
  role         Role         @default(member)
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@id([userId, orgId])
}

model ProjectMembership {
  userId    String
  projectId String
  role      Role     @default(member)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
}

model Project {
  id           String              @id @default(cuid())
  name         String
  slug         String
  description  String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  orgId        String
  organization Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  secrets      Secret[]
  members      ProjectMembership[]

  @@unique([orgId, slug])
}

model Secret {
  id          String        @id @default(cuid())
  key         String
  description String?
  projectId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  values      SecretValue[]

  @@unique([key, projectId])
}

model SecretValue {
  value       String
  environment Environment
  secretId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  secret      Secret      @relation(fields: [secretId], references: [id], onDelete: Cascade)

  @@id([secretId, environment])
}

model AuditLog {
  id           String       @id @default(cuid())
  userId       String
  orgId        String
  action       String
  resource     String
  metadata     Json
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([orgId])
}

model Invitation {
  id           String       @id @default(cuid())
  token        String       @unique
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  role         Role
  expiresAt    DateTime
  createdAt    DateTime     @default(now())

  @@index([orgId])
}
